PUPPET MODULES

Based on Example42 Puppet Modules:
    Official website: http://www.example42.com

A collection of modules for Puppet with the following targets:
    - Multi OS support and easy integration of new OS
    - Sysadmin oriented approach (for easier integration and customization)
    - Support for a growing number of applications
    - Adherence to Puppet modules standards
    - No enforcing of a specific logic for files management.
    - Separation of project's custom settings from application general management
    - Plug & Play approach: define variables (defaults are provided) and include the main class

Some research and experimentation is done on:
    - Definition and use of enhanced abstraction classes such as backup, monitor, firewall
    - Definition of a standard and pluggable define for inline modifications
    - Setup of Puppet toasters and baselines

NOTE: The whole project is a work in progress, the modules have been made in different
      times and have different levels of coherency and integration.


HOW TO USE
----------

1. Create a new module 'mvf' based on 'foo':

   ./module-clone.sh mvf

2. If needed, add custom 'projects' inside your module:

   cd mvf
   ../project-rename 'example42' 'my-project'



MODULES STANDARD STRUCTURE
--------------------------

Newer modules are based on the standard template defined in the "foo" module.
Use the script "module-clone.sh" to clone a new module based on the foo
template.  Use the script "project-rename.sh" in a module to change all the
references to example42 to your custom project

This template provides the following files:

# Documentation and metadata
----------------------------
foo/README      - The module's general documentation
foo/Modulefile  - Metadata for the Puppet Forge

# Main classes
--------------
foo/manifests/init.pp   - Contains the base module class
foo/manifests/params.pp - Contains all the module variables

# Additional classes
--------------------
foo/manifests/absent.pp         - foo::absent      removes foo package
foo/manifests/disable.pp        - foo::disable     disables foo service (boot and runtime)
foo/manifests/disableboot.pp    - foo::disableboot disables foo service at boot
foo/manifests/install.pp        - foo::install     installs foo package
foo/manifests/remove.pp         - foo::remove      symlink to foo::absent

# Extended classes (experimental)
---------------------------------
foo/manifests/backup.pp     - Extended class to abstract backup logic
foo/manifests/firewall.pp   - Extended class to abstract firewalling logic
foo/manifests/monitor.pp    - Extended class to abstract monitoring logic

# Custom project related classes
--------------------------------
foo/manifest/example42.pp           - Sample project related class for general customizations
foo/manifest/monitor/example42.pp   - Sample project related class for monitor customizations
foo/manifest/backup/example42.pp    - Sample project related class for backup customizations

# Generic configuration inline define (experimental)
----------------------------------------------------
foo/manifests/conf.pp       - Define for inline replacements in foo's main config file

# Debug
-------
foo/manifests/debug.pp          - Debug class. Activated if ($debug == yes)
foo/templates/variables_foo.erb - Debug template with all the modules parameters


# GENERAL VARIABLES
These modules can be used with whatever nodes infrastructure you may define: you
can use nodes definitions in Puppet manifests or an external node tool such as
the Dashboard or Foreman.

To use the modules you just have to include them and provide the eventual
variables they need (defaults are set if none is provided).

There are some general site-wide variables that can be used to fully use these
modules:

$my_project
    Defines the name of your project and cab be used to automatically load
    custom project related classes

$debug
    If set to "yes" it enables some useful (not resource intensive) stuff for
    debugging (check in /var/lib/puppet/debug/).

$monitor
    If set to "yes" you enable autoloading of monitor extended classes.  Check
    monitor module for more info

$monitor_tool
    An array that defines the monitor tools to use (ie: monit, munin, nagios...)

$backup
    If set to "yes" you enable autoloading of backup extended classes.  Check
    backup module for more info

$firewall
    If set to "yes" you enable autoloading of firewall extended classes. Check
    firewall module for more info.

Please note that currently the monitor, backup and firewall functions are
experimental.


